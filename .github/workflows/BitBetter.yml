name: BitBetter Image

on:
  push:
  schedule:
    - cron:  '0 0 * * *'
jobs:
  regenerate_cert:
    runs-on: ubuntu-latest
    name: Regenerate Certificate
    outputs:
      regenerate: ${{ steps.check_regenerate.outputs.regenerate }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: 'public'
      - name: Check if Regeneration Requested
        id: check_regenerate
        run: |
          export REGENERATE="$(cat regenerate_cert.txt)"
          echo "##[set-output name=regenerate;]$REGENERATE"
      - name: Regenerate Certificate
        id: regenerate
        if: ${{ steps.check_regenerate.outputs.regenerate == 'true' }}
        run: |
          docker build -f ./publicKeys/Dockerfile -t bitbetter/certificate-gen .
          docker run --rm -v $PWD/publicKeys:/certs bitbetter/certificate-gen
          echo false > regenerate_cert.txt
      - name: Commit New Certificate
        if: ${{ steps.check_regenerate.outputs.regenerate == 'true' }}
        uses: EndBug/add-and-commit@v4
        with:
          message: "Regenerate Certificate"
          add: "publicKeys/cert.pem publicKeys/key.pem publicKeys/cert.cert publicKeys/cert.pfx regenerate_cert.txt"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  check_version:
    runs-on: ubuntu-latest
    name: Check Last Built Version
    outputs:
      buildimage: ${{ steps.get_version.outputs.buildimage }}
      buildversion: ${{ steps.get_version.outputs.buildversion }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: 'public'
      - name: Get Latest Version
        id: get_version
        run: |
          export BW_VERSION_LATEST="$(curl --silent https://raw.githubusercontent.com/bitwarden/server/master/scripts/bitwarden.sh | grep 'COREVERSION="' | sed 's/^[^"]*"//; s/".*//')"
          export BW_VERSION_LAST_BUILT="$(cat bw_version.txt)"
          if [ $BW_VERSION_LATEST == $BW_VERSION_LAST_BUILT ]; then
            export NEED_BUILD=false
          else
            export NEED_BUILD=true
          fi
          echo "##[set-output name=buildimage;]$NEED_BUILD"
          echo "##[set-output name=buildversion;]$BW_VERSION_LATEST"

  build_bitbetter:
    runs-on: ubuntu-latest
    name: Build BitBetter
    needs: [check_version, regenerate_cert]
    if: ${{ needs.check_version.outputs.buildimage == 'true' || needs.regenerate_cert.outputs.regenerate == 'true' || github.event_name == 'push' }}
    env:
      VERSION: ${{ needs.check_version.outputs.buildversion }}
    strategy:
      matrix:
        include:
          - image_name: api
            src_location: ./src/bitBetter/Dockerfile
            build_arg: BITWARDEN_TAG=bitwarden/api
          - image_name: identity
            src_location: ./src/bitBetter/Dockerfile
            build_arg: BITWARDEN_TAG=bitwarden/identity
          - image_name: licensegen
            src_location: ./src/licenseGen/Dockerfile
            build_arg: BITWARDEN_TAG=bitwarden/api

          - image_name: api-custom
            src_location: ./src/bitBetter/Dockerfile.custom
            build_arg: BITWARDEN_TAG=bitwarden/api
          - image_name: identity-custom
            src_location: ./src/bitBetter/Dockerfile.custom
            build_arg: BITWARDEN_TAG=bitwarden/identity
          - image_name: licensegen-custom
            src_location: ./src/licenseGen/Dockerfile
            build_arg: BITWARDEN_TAG=bitwarden/api
          - image_name: certificate-gen
            src_location: ./publicKeys/Dockerfile
            build_arg: BITWARDEN_TAG=bitwarden/api

    steps:
      - uses: actions/checkout@v2
        with:
          ref: 'public'
      - name: Set Variables
        id: set_repo
        run: |
          export SRC_LOCATION=${{ matrix.src_location }}
          export BUILD_ARG=${{ matrix.build_arg }}
          export IMAGE_NAME=${{ matrix.image_name }}

          echo "SRC_LOCATION=${SRC_LOCATION}" >> $GITHUB_ENV
          echo "BUILD_ARG=${BUILD_ARG}" >> $GITHUB_ENV
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV

          echo Repository set as: ${REPO}
          echo Source location set as: ${SRC_LOCATION}
          echo Build arg set as: ${BUILD_ARG}
          echo Image name set as: ${IMAGE_NAME}
      - name: Build Image
        id: build_image
        run: |
          docker build -f ${SRC_LOCATION} --build-arg ${BUILD_ARG}:${VERSION} -t bitbetter/${IMAGE_NAME}:ci-$GITHUB_RUN_NUMBER .
      - name: Save tarball
        run: |
          docker save --output output.tar bitbetter/${IMAGE_NAME}:ci-$GITHUB_RUN_NUMBER
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ci-${IMAGE_NAME}-$GITHUB_RUN_NUMBER.tar
          path: output.tar

  publish_bitbetter:
    runs-on: ubuntu-latest
    name: Publish BitBetter
    needs: [check_version, build_bitbetter]
    env:
      VERSION: ${{ needs.check_version.outputs.buildversion }}
    strategy:
      matrix:
        registry:
          - {
              url: registry.hub.docker.com,
              username: dockerID,
              password: dockerPassword,
              repo: yaoa/bitbetter
            }
          - {
              url: ghcr.io/alexyao2015,
              username: CR_USER,
              password: CR_PAT,
              repo: ghcr.io/alexyao2015/bitbetter
            }
        image_name: [api, identity, licensegen, api-custom, identity-custom, licensegen-custom, certificate-gen]

    steps:
      - name: Set Variables
        id: set_repo
        run: |
          export REPO=${{ matrix.registry.repo }}
          export IMAGE_NAME=${{ matrix.image_name }}

          echo "REPO=${REPO}" >> $GITHUB_ENV
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV

          echo Repository set as: ${REPO}
          echo Image name set as: ${IMAGE_NAME}
      - name: Download container artifact
        uses: actions/download-artifact@v2
        with:
          name: ci-${{ matrix.image_name }}-${{ github.run_number }}.tar
      - name: Import image
        run: |
          docker load --input output.tar
      - name: Login
        run: |
          docker login ${{ matrix.registry.url }} -u ${{ secrets[matrix.registry.username] }} -p ${{ secrets[matrix.registry.password] }}
      - name: Deploy Run Number
        run: |
          docker tag bitbetter/${IMAGE_NAME}:ci-$GITHUB_RUN_NUMBER ${REPO}:${IMAGE_NAME}-$GITHUB_RUN_NUMBER
          docker push ${REPO}:${IMAGE_NAME}-$GITHUB_RUN_NUMBER
          echo ${REPO}:${IMAGE_NAME}-$GITHUB_RUN_NUMBER Deployed
      - name: Deploy Latest
        run: |
          docker tag bitbetter/${IMAGE_NAME}:ci-$GITHUB_RUN_NUMBER ${REPO}:${IMAGE_NAME}-latest
          docker push ${REPO}:${IMAGE_NAME}-latest
          echo ${REPO}:${IMAGE_NAME}-latest Deployed
      - name: Deploy Tag
        run: |
          docker tag bitbetter/${IMAGE_NAME}:ci-$GITHUB_RUN_NUMBER ${REPO}:${IMAGE_NAME}-${VERSION}
          docker push ${REPO}:${IMAGE_NAME}-${VERSION}
          echo ${REPO}:${IMAGE_NAME}-${VERSION} Deployed

  commit_version:
    runs-on: ubuntu-latest
    name: Commit Build Version
    needs: [check_version, publish_bitbetter]
    env:
      VERSION: ${{ needs.check_version.outputs.buildversion }}
    steps:
      - name: Save Version Number
        run: |
          echo ${VERSION} > bw_version.txt
      - name: Commit changes
        uses: EndBug/add-and-commit@v4
        with:
          message: "Bitwarden Version Update"
          add: "bw_version.txt"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
